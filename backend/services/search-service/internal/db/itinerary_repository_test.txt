package db

import (
	//"database/sql"
	sqlmock "github.com/DATA-DOG/go-sqlmock"
	"github.com/lib/pq"
	"testing"
	//"github.com/jordyob03/TripTailor/backend/services/search-service/internal/models"
	"github.com/stretchr/testify/assert"
)

func TestGetScoredItineraries(t *testing.T) {
	database, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}
	defer database.Close()

	// Mock input parameters
	params := map[string]interface{}{
		"city":      "Tokyo",
		"languages": []string{"Japanese", "English"},
		"tags":      []string{"food", "adventure"},
		"price":     200.0,
	}

	// Expected SQL query
	query := `
        SELECT * 
        FROM (SELECT *, ((CASE WHEN $1::text IS NOT NULL AND city ILIKE '%' || $1 || '%' THEN 1 ELSE 0 END) +
                         (SELECT COUNT(*) FROM unnest($2::text[]) AS lang WHERE lang = ANY(languages)) +
                         (SELECT COUNT(*) FROM unnest($3::text[]) AS tag WHERE tag = ANY(tags)) +
                         (CASE WHEN price <= $4 THEN 1 ELSE 0 END)) AS total_score 
              FROM itineraries) AS scored_itineraries
        WHERE total_score >= 2
        ORDER BY total_score DESC`

	// Mocked rows
	rows := sqlmock.NewRows([]string{"itineraryid", "name", "city", "country", "title", "description", "price", "languages", "tags", "events", "postid", "username", "total_score"}).
		AddRow(3, "Tokyo Food Tour", "Tokyo", "Japan", "Taste of Tokyo", "Delve into the best sushi and ramen in Tokyo.", 150.0, pq.Array([]string{"Japanese", "English"}), pq.Array([]string{"food", "sushi"}), pq.Array([]string{"event1", "event2"}), 103, "user1", 3).
		AddRow(4, "Tokyo Nightlife", "Tokyo", "Japan", "Night Owls", "Enjoy Tokyo's vibrant nightlife scene.", 180.0, pq.Array([]string{"Japanese", "English"}), pq.Array([]string{"nightlife", "club"}), pq.Array([]string{"event3", "event4"}), 104, "user1", 2)

	// Expect query with arguments
	mock.ExpectQuery(query).
		WithArgs(params["city"], pq.Array(params["languages"]), pq.Array(params["tags"]), params["price"]).
		WillReturnRows(rows)

	// Call function
	itineraries, err := GetScoredItineraries(database, params)

	// Assertions
	assert.NoError(t, err)
	assert.Len(t, itineraries, 2)

	// Assert the first itinerary
	assert.Equal(t, 3, itineraries[0].Itinerary.ItineraryId)
	assert.Equal(t, "Tokyo", itineraries[0].Itinerary.City)
	assert.Equal(t, "Taste of Tokyo", itineraries[0].Itinerary.Title)
	assert.Equal(t, 3, itineraries[0].TotalMatchCount)

	// Assert the second itinerary
	assert.Equal(t, 4, itineraries[1].Itinerary.ItineraryId)
	assert.Equal(t, "Tokyo", itineraries[1].Itinerary.City)
	assert.Equal(t, "Night Owls", itineraries[1].Itinerary.Title)
	assert.Equal(t, 2, itineraries[1].TotalMatchCount)

	// Check expectations
	if err := mock.ExpectationsWereMet(); err != nil {
		t.Errorf("there were unfulfilled expectations: %s", err)
	}
}
